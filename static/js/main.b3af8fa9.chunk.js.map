{"version":3,"sources":["TodoHooks.js","App.js","reportWebVitals.js","index.js"],"names":["TodoHooks","useState","textArr","setTextArr","texts","setTexts","className","placeholder","onChange","e","target","value","handler","onClick","preventDefault","detail","id","Date","now","isComplete","text","type","map","t","ind","findIndex","newtextArr","completedText","filteredArr","filter","delText","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAyDeA,MAvDf,WAAsB,IAAD,EACQC,mBAAS,IADjB,mBACdC,EADc,KACNC,EADM,OAEIF,mBAAS,IAFb,mBAEdG,EAFc,KAERC,EAFQ,KAkCrB,OACQ,sBAAKC,UAAU,eAAf,UACK,iCACD,iCACA,uBAAOA,UAAU,aAAaC,YAAY,iBAAmBC,SAAU,SAAAC,GAAC,OAlCpE,SAAAA,GACZJ,EAASI,EAAEC,OAAOC,OAiCgEC,CAAQH,MAClF,wBAAQH,UAAU,SAASO,QA/BtB,SAACJ,GAEd,GADAA,EAAEK,iBACU,KAARV,EAAY,CACZ,IAAOW,EAAS,CACZC,GAAKC,KAAKC,MACVC,YAAa,EACbC,KAAOhB,GAEbD,EAAW,GAAD,mBAAKD,GAAL,CAAaa,OAuB6BM,KAAK,SAAnD,oBAGA,iCACF,mCAAMnB,EAAQoB,KAAI,SAAAC,GAAC,OACb,qBAAIjB,UAAU,QAAd,UACE,0BAASA,UAAU,UAAnB,cAA8B,mBAAGA,UAAWiB,EAAEJ,WAAW,WAAW,SAAtC,SAAkDI,EAAEH,OAChF,wBAAQd,UAAU,QAAQe,KAAK,SAASR,QAAS,SAAAJ,GAAC,OAtBhD,SAAAO,GAClB,IAAMQ,EAAMtB,EAAQuB,WAAU,SAAAF,GAAC,OAAIA,EAAEP,KAAKA,KACpCU,EAAU,YAAOxB,GACvBwB,EAAWF,GAAX,2BACOE,EAAWF,IADlB,IAEIL,YAAW,IAEfhB,EAAW,YAAIuB,IAeqDC,CAAcJ,EAAEP,KAApE,eACA,wBAAQV,UAAU,QAAQe,KAAK,SAASR,QAAS,SAAAJ,GAAC,OA5BtD,SAAAO,GACZ,IACMY,EADM,YAAO1B,GACQ2B,QAAO,SAAAN,GAAC,OAAIA,EAAEP,KAAKA,KAC9Cb,EAAWyB,GAyByDE,CAAQP,EAAEP,KAA9D,kBAHJ,MAA2BO,EAAEP,gBClC9Be,MARf,WACE,OACE,qBAAKzB,UAAU,MAAf,SACK,cAAC,EAAD,OCKM0B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b3af8fa9.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\nimport App from './App.css'\r\nfunction TodoHooks() {\r\nconst [textArr,setTextArr] = useState([]);\r\nconst [texts,setTexts] = useState('');\r\n\r\nconst handler = e =>{\r\n    setTexts(e.target.value)\r\n}\r\n\r\nconst addTexts = (e) =>{\r\n    e.preventDefault();\r\n    if (texts!=='') { \r\n        const  detail = {\r\n            id : Date.now(),\r\n            isComplete : false,\r\n            text : texts \r\n        }\r\n      setTextArr([...textArr,detail])\r\n    }  \r\n} \r\nconst delText = id =>{\r\n    const newAry = [...textArr]\r\n    const filteredArr = newAry.filter(t => t.id!==id)\r\n    setTextArr(filteredArr)\r\n}\r\nconst completedText = id =>{\r\n    const ind = textArr.findIndex(t => t.id===id) \r\n    const newtextArr = [...textArr]\r\n    newtextArr[ind] = {\r\n        ...newtextArr[ind],\r\n        isComplete:true,\r\n    }\r\n    setTextArr([...newtextArr])\r\n}\r\n \r\nreturn (\r\n        <div className='containerone'>\r\n             <header>\r\n            <form>\r\n            <input className='inputfield' placeholder='Enter Text....'   onChange={e=>handler(e)}  />\r\n            <button className='onebut' onClick={addTexts} type='submit'>+</button>\r\n            </form>\r\n            </header> \r\n            <footer>\r\n          <ul> {textArr.map(t =>(\r\n                <li className='listn' key={t.id}>\r\n                  <section className='section'> <p className={t.isComplete?'complete':'ninput'} >{t.text}</p>\r\n                    <button className='butt1' type='submit' onClick={e=>completedText(t.id)}>C</button>\r\n                    <button className='butt2' type='submit' onClick={e=>delText(t.id)}>-</button>\r\n                    </section> </li> \r\n             )) }\r\n            </ul></footer> \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoHooks\r\n","import React  from 'react';\nimport TodoHooks from './TodoHooks';\n\n\nfunction App() {\n  return (  \n    <div className=\"App\">  \n         <TodoHooks />  \n    </div>\n  ); \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}